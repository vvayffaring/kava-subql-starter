import { NearDatasource } from '@subql/types-near';
import { INearProjectManifest } from '../types';
import { ProjectManifestV0_0_1Impl, RuntimeDataSourceV0_0_1 } from './v0_0_1';
import { ProjectManifestV0_2_0Impl } from './v0_2_0';
import { ProjectManifestV0_2_1Impl } from './v0_2_1';
import { ProjectManifestV0_3_0Impl } from './v0_3_0';
import { ProjectManifestV1_0_0Impl } from './v1_0_0';
export type VersionedProjectManifest = {
    specVersion: string;
};
declare const NEAR_SUPPORTED_VERSIONS: {
    '1.0.0': typeof ProjectManifestV1_0_0Impl;
};
type Versions = keyof typeof NEAR_SUPPORTED_VERSIONS;
type ProjectManifestImpls = InstanceType<typeof NEAR_SUPPORTED_VERSIONS[Versions]>;
export declare function manifestIsV0_0_1(manifest: INearProjectManifest): manifest is ProjectManifestV0_0_1Impl;
export declare function manifestIsV0_2_0(manifest: INearProjectManifest): manifest is ProjectManifestV0_2_0Impl;
export declare function manifestIsV0_2_1(manifest: INearProjectManifest): manifest is ProjectManifestV0_2_1Impl;
export declare function manifestIsV0_3_0(manifest: INearProjectManifest): manifest is ProjectManifestV0_3_0Impl;
export declare function manifestIsV1_0_0(manifest: INearProjectManifest): manifest is ProjectManifestV1_0_0Impl;
export declare class NearProjectManifestVersioned implements INearProjectManifest {
    private _impl;
    constructor(projectManifest: VersionedProjectManifest);
    get asImpl(): ProjectManifestImpls;
    get isV0_0_1(): boolean;
    get isV0_2_0(): boolean;
    get isV0_2_1(): boolean;
    get isV0_3_0(): boolean;
    get isV1_0_0(): boolean;
    get asV1_0_0(): ProjectManifestV1_0_0Impl;
    toDeployment(): string | undefined;
    validate(): void;
    get dataSources(): (NearDatasource | RuntimeDataSourceV0_0_1)[];
    get schema(): string;
    get specVersion(): string;
    get description(): string;
    get repository(): string;
}
export {};
