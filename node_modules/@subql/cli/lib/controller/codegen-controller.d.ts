import { RuntimeDatasourceTemplate as AvalancheDsTemplate, CustomDatasourceTemplate as AvalancheCustomDsTemplate } from '@subql/common-avalanche';
import { RuntimeDatasourceTemplate as CosmosDsTemplate, CustomDatasourceTemplate as CosmosCustomDsTemplate } from '@subql/common-cosmos';
import { RuntimeDatasourceTemplate as EthereumDsTemplate, CustomDatasourceTemplate as EthereumCustomDsTemplate, RuntimeDataSourceV0_3_0 as EthereumDs, CustomDatasourceV0_3_0 as EthereumCustomDs } from '@subql/common-ethereum';
import { RuntimeDatasourceTemplate as NearDsTemplate, CustomDatasourceTemplate as NearCustomDsTemplate } from '@subql/common-near';
import { RuntimeDatasourceTemplate as SubstrateDsTemplate, CustomDatasourceTemplate as SubstrateCustomDsTemplate, CustomDatasourceV0_2_0 as SubstrateCustomDatasource } from '@subql/common-substrate';
import { RuntimeDatasourceTemplate as TerraDsTemplate, CustomDatasourceTemplate as TerraCustomDsTemplate } from '@subql/common-terra';
import { GraphQLEntityField, GraphQLJsonFieldType, GraphQLEntityIndex } from '@subql/utils';
import ejs from 'ejs';
type TemplateKind = SubstrateDsTemplate | SubstrateCustomDsTemplate | AvalancheDsTemplate | AvalancheCustomDsTemplate | CosmosDsTemplate | CosmosCustomDsTemplate | EthereumDsTemplate | EthereumCustomDsTemplate | NearDsTemplate | NearCustomDsTemplate | TerraDsTemplate | TerraCustomDsTemplate;
type DatasourceKind = SubstrateCustomDatasource | EthereumDs | EthereumCustomDs;
export declare function renderTemplate(templatePath: string, outputPath: string, templateData: ejs.Data): Promise<void>;
export interface ProcessedField {
    name: string;
    type: string;
    required: boolean;
    isEnum: boolean;
    indexed: boolean;
    unique?: boolean;
    isArray: boolean;
    isJsonInterface: boolean;
}
export declare function generateJsonInterfaces(projectPath: string, schema: string): Promise<void>;
export declare function generateEnums(projectPath: string, schema: string): Promise<void>;
export declare function generateAbis(datasources: DatasourceKind[], projectPath: string): Promise<void>;
export declare function processFields(type: 'entity' | 'jsonField', className: string, fields: (GraphQLEntityField | GraphQLJsonFieldType)[], indexFields?: GraphQLEntityIndex[]): ProcessedField[];
export declare function codegen(projectPath: string, fileName?: string): Promise<void>;
export declare function validateEntityName(name: string): string;
export declare function generateModels(projectPath: string, schema: string): Promise<void>;
export declare function generateDatasourceTemplates(projectPath: string, specVersion: string, templates: TemplateKind[]): Promise<void>;
export {};
