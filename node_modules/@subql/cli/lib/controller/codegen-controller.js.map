{"version":3,"file":"codegen-controller.js","sourceRoot":"","sources":["../../src/controller/codegen-controller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport fs from 'fs';\nimport path from 'path';\nimport {promisify} from 'util';\nimport {getManifestPath, getSchemaPath, loadFromJsonOrYaml} from '@subql/common';\nimport {\n  isCustomDs as isCustomAvalancheDs,\n  isRuntimeDs as isRuntimeAvalancheDs,\n  RuntimeDatasourceTemplate as AvalancheDsTemplate,\n  CustomDatasourceTemplate as AvalancheCustomDsTemplate,\n} from '@subql/common-avalanche';\nimport {\n  isCustomCosmosDs,\n  isRuntimeCosmosDs,\n  RuntimeDatasourceTemplate as CosmosDsTemplate,\n  CustomDatasourceTemplate as CosmosCustomDsTemplate,\n} from '@subql/common-cosmos';\nimport {\n  isCustomDs as isCustomEthereumDs,\n  isRuntimeDs as isRuntimeEthereumDs,\n  RuntimeDatasourceTemplate as EthereumDsTemplate,\n  CustomDatasourceTemplate as EthereumCustomDsTemplate,\n  RuntimeDataSourceV0_3_0 as EthereumDs,\n  CustomDatasourceV0_3_0 as EthereumCustomDs,\n} from '@subql/common-ethereum';\nimport {\n  isCustomDs as isCustomNearDs,\n  isRuntimeDs as isRuntimeNearDs,\n  RuntimeDatasourceTemplate as NearDsTemplate,\n  CustomDatasourceTemplate as NearCustomDsTemplate,\n} from '@subql/common-near';\nimport {\n  isCustomDs as isCustomSubstrateDs,\n  RuntimeDatasourceTemplate as SubstrateDsTemplate,\n  CustomDatasourceTemplate as SubstrateCustomDsTemplate,\n  CustomDatasourceV0_2_0 as SubstrateCustomDatasource,\n} from '@subql/common-substrate';\nimport {\n  isCustomTerraDs,\n  isRuntimeTerraDs,\n  RuntimeDatasourceTemplate as TerraDsTemplate,\n  CustomDatasourceTemplate as TerraCustomDsTemplate,\n} from '@subql/common-terra';\nimport {\n  getAllEntitiesRelations,\n  getAllJsonObjects,\n  setJsonObjectType,\n  getTypeByScalarName,\n  GraphQLEntityField,\n  GraphQLJsonFieldType,\n  GraphQLEntityIndex,\n  getAllEnums,\n} from '@subql/utils';\nimport ejs from 'ejs';\nimport {upperFirst, uniq} from 'lodash';\nimport rimraf from 'rimraf';\nimport {runTypeChain, glob, parseContractPath} from 'typechain';\n\ntype TemplateKind =\n  | SubstrateDsTemplate\n  | SubstrateCustomDsTemplate\n  | AvalancheDsTemplate\n  | AvalancheCustomDsTemplate\n  | CosmosDsTemplate\n  | CosmosCustomDsTemplate\n  | EthereumDsTemplate\n  | EthereumCustomDsTemplate\n  | NearDsTemplate\n  | NearCustomDsTemplate\n  | TerraDsTemplate\n  | TerraCustomDsTemplate;\n\ntype DatasourceKind = SubstrateCustomDatasource | EthereumDs | EthereumCustomDs;\n\nconst MODEL_TEMPLATE_PATH = path.resolve(__dirname, '../template/model.ts.ejs');\nconst MODELS_INDEX_TEMPLATE_PATH = path.resolve(__dirname, '../template/models-index.ts.ejs');\nconst TYPES_INDEX_TEMPLATE_PATH = path.resolve(__dirname, '../template/types-index.ts.ejs');\nconst INTERFACE_TEMPLATE_PATH = path.resolve(__dirname, '../template/interface.ts.ejs');\nconst ABI_INTERFACE_TEMPLATE_PATH = path.resolve(__dirname, '../template/abi-interface.ts.ejs');\nconst ENUM_TEMPLATE_PATH = path.resolve(__dirname, '../template/enum.ts.ejs');\nconst DYNAMIC_DATASOURCE_TEMPLATE_PATH = path.resolve(__dirname, '../template/datasource-templates.ts.ejs');\nconst TYPE_ROOT_DIR = 'src/types';\nconst MODEL_ROOT_DIR = 'src/types/models';\nconst ABI_INTERFACES_ROOT_DIR = 'src/types/abi-interfaces';\nconst CONTRACTS_DIR = 'src/types/contracts'; //generated\nconst TYPECHAIN_TARGET = 'ethers-v5';\n\nconst RESERVED_KEYS = ['filter', 'filters'];\n\nconst exportTypes = {\n  models: false,\n  interfaces: false,\n  enums: false,\n  datasources: false,\n};\n\n// 4. Render entity data in ejs template and write it\nexport async function renderTemplate(templatePath: string, outputPath: string, templateData: ejs.Data): Promise<void> {\n  const data = await ejs.renderFile(templatePath, templateData);\n  await fs.promises.writeFile(outputPath, data);\n}\n\n// 3. Re-format the field of the entity\nexport interface ProcessedField {\n  name: string;\n  type: string;\n  required: boolean;\n  isEnum: boolean;\n  indexed: boolean;\n  unique?: boolean;\n  isArray: boolean;\n  isJsonInterface: boolean;\n}\n\nexport async function generateJsonInterfaces(projectPath: string, schema: string): Promise<void> {\n  const typesDir = path.join(projectPath, TYPE_ROOT_DIR);\n  const jsonObjects = getAllJsonObjects(schema);\n  const jsonInterfaces = jsonObjects.map((r) => {\n    const object = setJsonObjectType(r, jsonObjects);\n    const fields = processFields('jsonField', object.name, object.fields);\n    return {\n      interfaceName: object.name,\n      fields,\n    };\n  });\n\n  if (jsonInterfaces.length !== 0) {\n    const interfaceTemplate = {\n      props: {\n        jsonInterfaces,\n      },\n      helper: {\n        upperFirst,\n      },\n    };\n    try {\n      await renderTemplate(INTERFACE_TEMPLATE_PATH, path.join(typesDir, `interfaces.ts`), interfaceTemplate);\n      exportTypes.interfaces = true;\n    } catch (e) {\n      throw new Error(`When render json interfaces having problems.`);\n    }\n  }\n}\n\nexport async function generateEnums(projectPath: string, schema: string): Promise<void> {\n  const typesDir = path.join(projectPath, TYPE_ROOT_DIR);\n  const jsonObjects = getAllEnums(schema);\n  const enums = jsonObjects.map((r) => {\n    return {\n      name: r.name,\n      values: r.getValues().map((v) => v.name),\n    };\n  });\n\n  if (enums.length !== 0) {\n    const enumsTemplate = {\n      props: {\n        enums,\n      },\n    };\n    try {\n      await renderTemplate(ENUM_TEMPLATE_PATH, path.join(typesDir, `enums.ts`), enumsTemplate);\n      exportTypes.enums = true;\n    } catch (e) {\n      throw new Error(`When render enums having problems.`);\n    }\n  }\n}\n\ninterface abiRenderProps {\n  name: string;\n  events: string[];\n  functions: {typeName: string; functionName: string}[];\n}\ninterface abiInterface {\n  name: string;\n  type: 'event' | 'function';\n  inputs: {\n    internalType: string;\n    name: string;\n    type: string;\n  }[];\n}\nexport async function generateAbis(datasources: DatasourceKind[], projectPath: string): Promise<void> {\n  const sortedAssets = new Map<string, string>();\n  datasources.map((d) => {\n    if (!d?.assets) {\n      return;\n    }\n    if (isRuntimeEthereumDs(d) || isCustomEthereumDs(d) || isCustomSubstrateDs(d)) {\n      Object.entries(d.assets).map(([name, value]) => {\n        const filePath = path.join(projectPath, value.file);\n        if (!fs.existsSync(filePath)) {\n          throw new Error(`Error: Asset ${name}, file ${value.file} does not exist`);\n        }\n        // We use actual abi file name instead on name provided in assets\n        // This is aligning with files in './ethers-contracts'\n        sortedAssets.set(parseContractPath(filePath).name, value.file);\n      });\n    }\n  });\n  if (sortedAssets.size !== 0) {\n    await prepareDirPath(path.join(projectPath, ABI_INTERFACES_ROOT_DIR), true);\n    try {\n      const allFiles = glob(projectPath, [...sortedAssets.values()]);\n      // Typechain generate interfaces under CONTRACTS_DIR\n      await runTypeChain({\n        cwd: projectPath,\n        filesToProcess: allFiles,\n        allFiles,\n        outDir: CONTRACTS_DIR,\n        target: TYPECHAIN_TARGET,\n      });\n      // Iterate here as we have to make sure type chain generated successful,\n      // also avoid duplicate generate same abi interfaces\n      const renderAbiJobs = processAbis(sortedAssets, projectPath);\n      await Promise.all(\n        renderAbiJobs.map((renderProps) => {\n          console.log(`* Abi Interface ${renderProps.name} generated`);\n          return renderTemplate(\n            ABI_INTERFACE_TEMPLATE_PATH,\n            path.join(projectPath, ABI_INTERFACES_ROOT_DIR, `${renderProps.name}.ts`),\n            {\n              props: {abi: renderProps},\n              helper: {upperFirst},\n            }\n          );\n        })\n      );\n    } catch (e) {\n      console.error(`! Unable to generate abi interface. ${e.message}`);\n    }\n  }\n}\n\nfunction processAbis(sortedAssets: Map<string, string>, projectPath: string): abiRenderProps[] {\n  const renderInterfaceJobs: abiRenderProps[] = [];\n  sortedAssets.forEach((value, key) => {\n    const renderProps: abiRenderProps = {name: key, events: [], functions: []};\n    const readAbi = loadFromJsonOrYaml(path.join(projectPath, value)) as abiInterface[];\n    // We need to use for loop instead of map, due to events/function name could be duplicate,\n    // because they have different input, and following ether typegen rules, name also changed\n    // we need to find duplicates, and update its name rather than just unify them.\n    const duplicateEventNames = readAbi\n      .filter((abiObject) => abiObject.type === 'event')\n      .map((obj) => obj.name)\n      .filter((name, index, arr) => arr.indexOf(name) !== index);\n    const duplicateFunctionNames = readAbi\n      .filter((abiObject) => abiObject.type === 'function')\n      .map((obj) => obj.name)\n      .filter((name, index, arr) => arr.indexOf(name) !== index);\n    readAbi.map((abiObject) => {\n      if (abiObject.type === 'function') {\n        let typeName = abiObject.name;\n        let functionName = abiObject.name;\n        if (duplicateFunctionNames.includes(abiObject.name)) {\n          functionName = `${abiObject.name}(${abiObject.inputs.map((obj) => obj.type.toLowerCase()).join(',')})`;\n          typeName = joinInputAbiName(abiObject);\n        }\n        renderProps.functions.push({typeName, functionName});\n      }\n      if (abiObject.type === 'event') {\n        let name = abiObject.name;\n        if (duplicateEventNames.includes(abiObject.name)) {\n          name = joinInputAbiName(abiObject);\n        }\n        renderProps.events.push(name);\n      }\n    });\n    // avoid empty json\n    if (!!renderProps.events || !!renderProps.functions) {\n      renderInterfaceJobs.push(renderProps);\n    }\n  });\n  return renderInterfaceJobs;\n}\n\nfunction joinInputAbiName(abiObject: abiInterface) {\n  // example: \"TextChanged_bytes32_string_string_string_Event\", Event name/Function type name will be joined in ejs\n  const inputToSnake: string = abiObject.inputs.map((obj) => obj.type.toLowerCase()).join('_');\n  return `${abiObject.name}_${inputToSnake}_`;\n}\n\nexport function processFields(\n  type: 'entity' | 'jsonField',\n  className: string,\n  fields: (GraphQLEntityField | GraphQLJsonFieldType)[],\n  indexFields: GraphQLEntityIndex[] = []\n): ProcessedField[] {\n  const fieldList: ProcessedField[] = [];\n  for (const field of fields) {\n    const injectField = {\n      name: field.name,\n      required: !field.nullable,\n      isArray: field.isArray,\n      isEnum: false,\n    } as ProcessedField;\n    if (type === 'entity') {\n      const [indexed, unique] = indexFields.reduce<[boolean, boolean]>(\n        (acc, indexField) => {\n          if (indexField.fields.includes(field.name)) {\n            acc[0] = true;\n            if (indexField.fields.length === 1 && indexField.unique) {\n              acc[1] = true;\n            } else if (indexField.unique === undefined) {\n              acc[1] = false;\n            }\n          }\n          return acc;\n        },\n        [false, undefined]\n      );\n      injectField.indexed = indexed;\n      injectField.unique = unique;\n    }\n    if ((field as GraphQLEntityField).isEnum) {\n      injectField.type = field.type;\n      injectField.isEnum = true;\n      injectField.isJsonInterface = false;\n    } else {\n      switch (field.type) {\n        default: {\n          injectField.type = getTypeByScalarName(field.type).tsType;\n          if (!injectField.type) {\n            throw new Error(\n              `Schema: undefined type \"${field.type.toString()}\" on field \"${\n                field.name\n              }\" in \"type ${className} @${type}\"`\n            );\n          }\n          injectField.isJsonInterface = false;\n          break;\n        }\n        case 'Json': {\n          if (field.jsonInterface === undefined) {\n            throw new Error(`On field ${field.name} type is Json but json interface is not defined`);\n          }\n          injectField.type = upperFirst(field.jsonInterface.name);\n          injectField.isJsonInterface = true;\n        }\n      }\n    }\n    fieldList.push(injectField);\n  }\n  return fieldList;\n}\n\nasync function prepareDirPath(path: string, recreate: boolean) {\n  try {\n    await promisify(rimraf)(path);\n    if (recreate) {\n      await fs.promises.mkdir(path, {recursive: true});\n    }\n  } catch (e) {\n    throw new Error(`Failed to prepare ${path}`);\n  }\n}\n\n//1. Prepare models directory and load schema\nexport async function codegen(projectPath: string, fileName?: string): Promise<void> {\n  const modelDir = path.join(projectPath, MODEL_ROOT_DIR);\n  const interfacesPath = path.join(projectPath, TYPE_ROOT_DIR, `interfaces.ts`);\n  await prepareDirPath(modelDir, true);\n  await prepareDirPath(interfacesPath, false);\n\n  const plainManifest = loadFromJsonOrYaml(getManifestPath(projectPath, fileName)) as {\n    specVersion: string;\n    templates?: TemplateKind[];\n    dataSources: DatasourceKind[];\n  };\n  if (plainManifest.templates && plainManifest.templates.length !== 0) {\n    await generateDatasourceTemplates(projectPath, plainManifest.specVersion, plainManifest.templates);\n  }\n\n  const schemaPath = getSchemaPath(projectPath, fileName);\n\n  await generateAbis(plainManifest.dataSources, projectPath);\n  await generateJsonInterfaces(projectPath, schemaPath);\n  await generateModels(projectPath, schemaPath);\n  await generateEnums(projectPath, schemaPath);\n\n  if (exportTypes.interfaces || exportTypes.models || exportTypes.enums || exportTypes.datasources) {\n    try {\n      await renderTemplate(TYPES_INDEX_TEMPLATE_PATH, path.join(projectPath, TYPE_ROOT_DIR, `index.ts`), {\n        props: {\n          exportTypes,\n        },\n      });\n    } catch (e) {\n      throw new Error(`When render index in types having problems.`);\n    }\n    console.log(`* Types index generated !`);\n  }\n}\nexport function validateEntityName(name: string): string {\n  for (const reservedKey of RESERVED_KEYS) {\n    if (name.toLowerCase().endsWith(reservedKey.toLowerCase())) {\n      throw new Error(`EntityName: ${name} cannot end with reservedKey: ${reservedKey}`);\n    }\n  }\n  return name;\n}\n// 2. Loop all entities and render it\nexport async function generateModels(projectPath: string, schema: string): Promise<void> {\n  const extractEntities = getAllEntitiesRelations(schema);\n  for (const entity of extractEntities.models) {\n    const baseFolderPath = '.../../base';\n    const className = upperFirst(entity.name);\n\n    const entityName = validateEntityName(entity.name);\n\n    const fields = processFields('entity', className, entity.fields, entity.indexes);\n    const importJsonInterfaces = uniq(fields.filter((field) => field.isJsonInterface).map((f) => f.type));\n    const importEnums = fields.filter((field) => field.isEnum).map((f) => f.type);\n    const indexedFields = fields.filter((field) => field.indexed && !field.isJsonInterface);\n    const modelTemplate = {\n      props: {\n        baseFolderPath,\n        className,\n        entityName,\n        fields,\n        importJsonInterfaces,\n        importEnums,\n        indexedFields,\n      },\n      helper: {\n        upperFirst,\n      },\n    };\n    try {\n      await renderTemplate(\n        MODEL_TEMPLATE_PATH,\n        path.join(projectPath, MODEL_ROOT_DIR, `${className}.ts`),\n        modelTemplate\n      );\n    } catch (e) {\n      console.error(e);\n      throw new Error(`When render entity ${className} to schema having problems.`);\n    }\n    console.log(`* Schema ${className} generated !`);\n  }\n  const classNames = extractEntities.models.map((entity) => entity.name);\n  if (classNames.length !== 0) {\n    try {\n      await renderTemplate(MODELS_INDEX_TEMPLATE_PATH, path.join(projectPath, MODEL_ROOT_DIR, `index.ts`), {\n        props: {\n          classNames,\n        },\n        helper: {\n          upperFirst,\n        },\n      });\n      exportTypes.models = true;\n    } catch (e) {\n      throw new Error(`When render index in models having problems.`);\n    }\n    console.log(`* Models index generated !`);\n  }\n}\n\nexport async function generateDatasourceTemplates(\n  projectPath: string,\n  specVersion: string,\n  templates: TemplateKind[]\n): Promise<void> {\n  const props = templates.map((t) => ({\n    name: t.name,\n    args: hasParameters(t) ? 'Record<string, unknown>' : undefined,\n  }));\n  try {\n    await renderTemplate(DYNAMIC_DATASOURCE_TEMPLATE_PATH, path.join(projectPath, TYPE_ROOT_DIR, `datasources.ts`), {\n      props,\n    });\n    exportTypes.datasources = true;\n  } catch (e) {\n    console.error(e);\n    throw new Error(`Unable to generate datasource template constructors`);\n  }\n  console.log(`* Datasource template constructors generated !`);\n}\n\nfunction hasParameters(t: TemplateKind): boolean {\n  return (\n    isRuntimeAvalancheDs(t as AvalancheDsTemplate) ||\n    isCustomAvalancheDs(t as AvalancheDsTemplate) ||\n    isRuntimeCosmosDs(t as CosmosDsTemplate) ||\n    isCustomCosmosDs(t as CosmosDsTemplate) ||\n    isRuntimeEthereumDs(t as EthereumDsTemplate) ||\n    isCustomEthereumDs(t as EthereumDsTemplate) ||\n    isCustomSubstrateDs(t as SubstrateDsTemplate) ||\n    isRuntimeTerraDs(t as TerraDsTemplate) ||\n    isCustomTerraDs(t as TerraDsTemplate) ||\n    isRuntimeNearDs(t as NearDsTemplate) ||\n    isCustomNearDs(t as NearDsTemplate)\n  );\n}\n"]}