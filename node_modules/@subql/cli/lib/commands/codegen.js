"use strict";
// Copyright 2020-2022 OnFinality Limited authors & contributors
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const core_1 = require("@oclif/core");
const common_1 = require("@subql/common");
const codegen_controller_1 = require("../controller/codegen-controller");
class Codegen extends core_1.Command {
    async run() {
        var _a;
        const { flags } = await this.parse(Codegen);
        this.log('===============================');
        this.log('---------Subql Codegen---------');
        this.log('===============================');
        const { file, location } = flags;
        const projectPath = path_1.default.resolve((_a = file !== null && file !== void 0 ? file : location) !== null && _a !== void 0 ? _a : process.cwd());
        const { manifest } = (0, common_1.getProjectRootAndManifest)(projectPath);
        // Split directory and file name
        const [fileDir, fileName] = [path_1.default.dirname(manifest), path_1.default.basename(manifest)];
        try {
            if (!fileDir) {
                throw new Error('Cannot resolve project manifest from --file argument given');
            }
            await (0, codegen_controller_1.codegen)(fileDir, fileName);
        }
        catch (err) {
            console.error(err.message);
            process.exit(1);
        }
    }
}
Codegen.description = 'Generate schemas for graph node';
Codegen.flags = {
    location: core_1.Flags.string({
        char: 'l',
        description: '[deprecated] local folder to run codegen in. please use file flag instead',
    }),
    file: core_1.Flags.string({ char: 'f', description: 'specify manifest file path (will overwrite -l if both used)' }),
};
exports.default = Codegen;
//# sourceMappingURL=codegen.js.map