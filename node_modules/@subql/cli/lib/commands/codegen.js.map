{"version":3,"file":"codegen.js","sourceRoot":"","sources":["../../src/commands/codegen.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AAEtC,wDAAwB;AACxB,sCAA2C;AAC3C,0CAAwD;AACxD,yEAAyD;AAEzD,MAAqB,OAAQ,SAAQ,cAAO;IAW1C,KAAK,CAAC,GAAG;;QACP,MAAM,EAAC,KAAK,EAAC,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC1C,IAAI,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;QAC5C,IAAI,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;QAC5C,IAAI,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;QAE5C,MAAM,EAAC,IAAI,EAAE,QAAQ,EAAC,GAAG,KAAK,CAAC;QAE/B,MAAM,WAAW,GAAG,cAAI,CAAC,OAAO,CAAC,MAAA,IAAI,aAAJ,IAAI,cAAJ,IAAI,GAAI,QAAQ,mCAAI,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;QAEpE,MAAM,EAAC,QAAQ,EAAC,GAAG,IAAA,kCAAyB,EAAC,WAAW,CAAC,CAAC;QAE1D,gCAAgC;QAChC,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC,GAAG,CAAC,cAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,cAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;QAE9E,IAAI;YACF,IAAI,CAAC,OAAO,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;aAC/E;YACD,MAAM,IAAA,4BAAO,EAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;SAClC;QAAC,OAAO,GAAG,EAAE;YACZ,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC3B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACjB;IACH,CAAC;;AAlCM,mBAAW,GAAG,iCAAiC,CAAC;AAEhD,aAAK,GAAG;IACb,QAAQ,EAAE,YAAK,CAAC,MAAM,CAAC;QACrB,IAAI,EAAE,GAAG;QACT,WAAW,EAAE,2EAA2E;KACzF,CAAC;IACF,IAAI,EAAE,YAAK,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,6DAA6D,EAAC,CAAC;CAC5G,CAAC;kBATiB,OAAO","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport path from 'path';\nimport {Command, Flags} from '@oclif/core';\nimport {getProjectRootAndManifest} from '@subql/common';\nimport {codegen} from '../controller/codegen-controller';\n\nexport default class Codegen extends Command {\n  static description = 'Generate schemas for graph node';\n\n  static flags = {\n    location: Flags.string({\n      char: 'l',\n      description: '[deprecated] local folder to run codegen in. please use file flag instead',\n    }),\n    file: Flags.string({char: 'f', description: 'specify manifest file path (will overwrite -l if both used)'}),\n  };\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(Codegen);\n    this.log('===============================');\n    this.log('---------Subql Codegen---------');\n    this.log('===============================');\n\n    const {file, location} = flags;\n\n    const projectPath = path.resolve(file ?? location ?? process.cwd());\n\n    const {manifest} = getProjectRootAndManifest(projectPath);\n\n    // Split directory and file name\n    const [fileDir, fileName] = [path.dirname(manifest), path.basename(manifest)];\n\n    try {\n      if (!fileDir) {\n        throw new Error('Cannot resolve project manifest from --file argument given');\n      }\n      await codegen(fileDir, fileName);\n    } catch (err) {\n      console.error(err.message);\n      process.exit(1);\n    }\n  }\n}\n"]}