{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/interfaces.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,sCAAsC;;;AA8HzB,QAAA,UAAU,GAAG;IACxB,aAAa,EAAE,eAAwB;IACvC,cAAc,EAAE,gBAAyB;IACzC,YAAY,EAAE,cAAuB;IACrC,QAAQ,EAAE,UAAmB;IAC7B,KAAK,EAAE,OAAgB;IACvB,MAAM,EAAE,QAAiB;IACzB,SAAS,EAAE,WAAoB;IAC/B,aAAa,EAAE,eAAwB;CAC/B,CAAC","sourcesContent":["// Copyright 2020-2022 OnFinality Limited authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport BN from 'bn.js';\nimport {Chunk, BlockHeader} from 'near-api-js/lib/providers/provider';\n\nexport interface Entity {\n  id: string;\n}\n\nexport interface IArgs extends String {\n  toJson<T = any>(): T;\n}\n\nexport type FunctionPropertyNames<T> = {\n  [K in keyof T]: T[K] extends Function ? K : never;\n}[keyof T];\n\nexport interface Store {\n  count(entity: string, field?: string, value?: any, options?: {distinct?: boolean; col?: string}): Promise<number>;\n  get(entity: string, id: string): Promise<Entity | null>;\n  getByField(entity: string, field: string, value: any, options?: {offset?: number; limit?: number}): Promise<Entity[]>;\n  getOneByField(entity: string, field: string, value: any): Promise<Entity | null>;\n  set(entity: string, id: string, data: Entity): Promise<void>;\n  bulkCreate(entity: string, data: Entity[]): Promise<void>;\n  //if fields in provided, only specify fields will be updated\n  bulkUpdate(entity: string, data: Entity[], fields?: string[]): Promise<void>;\n  remove(entity: string, id: string): Promise<void>;\n}\n\nexport interface NearBlock {\n  author: string;\n  header: BlockHeader;\n  chunks: Chunk[];\n  transactions: NearTransaction[];\n  actions: NearAction[];\n  receipts: NearTransactionReceipt[];\n}\n\nexport interface NearTransaction {\n  nonce: BN;\n  signer_id: string;\n  public_key: string;\n  receiver_id: string;\n  actions: NearAction[];\n  block_hash: string;\n  block_height: number;\n  gas_price: string;\n  gas_used: string;\n  timestamp: number;\n  result: TransactionResult;\n}\n\nexport interface TransactionResult {\n  id: string;\n  logs: string[];\n}\n\nexport interface NearTransactionReceipt {\n  id: number;\n  block_height: number;\n  receipt_id: string;\n  predecessor_id: string;\n  Action?: {\n    actions: NearAction[];\n    gas_price: BN;\n    input_data_ids: string[];\n    output_data_receivers: {\n      data_id: string;\n      receiver_id: string;\n    }[];\n    signer_id: string;\n    signer_public_key: string;\n  };\n  Data?: {\n    data: string;\n    data_id: string;\n  };\n  receiver_id: string;\n}\n\n//eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface CreateAccount {}\n\nexport interface DeployContract {\n  code: Uint8Array;\n}\n\nexport interface FunctionCall {\n  method_name: string;\n  args: IArgs;\n  gas: BN;\n  deposit: BN;\n}\n\nexport interface Transfer {\n  deposit: BN;\n}\n\nexport interface Stake {\n  stake: BN;\n  public_key: string;\n}\n\nexport interface AddKey {\n  public_key: string;\n  access_key: {nonce: BN; permission: string};\n}\n\nexport interface DeleteKey {\n  public_key: string;\n}\n\nexport interface DeleteAccount {\n  beneficiary_id: string;\n}\n\nexport type Action =\n  | CreateAccount\n  | DeployContract\n  | FunctionCall\n  | Transfer\n  | Stake\n  | AddKey\n  | DeleteKey\n  | DeleteAccount;\n\nexport const ActionType = {\n  CreateAccount: 'CreateAccount' as const,\n  DeployContract: 'DeployContract' as const,\n  FunctionCall: 'FunctionCall' as const,\n  Transfer: 'Transfer' as const,\n  Stake: 'Stake' as const,\n  AddKey: 'AddKey' as const,\n  DeleteKey: 'DeleteKey' as const,\n  DeleteAccount: 'DeleteAccount' as const,\n} as const;\n\nexport type ActionType = typeof ActionType[keyof typeof ActionType];\n\nexport interface NearAction<T = Action | any> {\n  id: number;\n  type: ActionType;\n  action: T;\n  transaction: NearTransaction;\n  receipt?: NearTransactionReceipt;\n}\n\nexport type DynamicDatasourceCreator = (name: string, args: Record<string, unknown>) => Promise<void>;\n"]}