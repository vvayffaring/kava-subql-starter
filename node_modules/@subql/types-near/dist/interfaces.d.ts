import BN from 'bn.js';
import { Chunk, BlockHeader } from 'near-api-js/lib/providers/provider';
export interface Entity {
    id: string;
}
export interface IArgs extends String {
    toJson<T = any>(): T;
}
export type FunctionPropertyNames<T> = {
    [K in keyof T]: T[K] extends Function ? K : never;
}[keyof T];
export interface Store {
    count(entity: string, field?: string, value?: any, options?: {
        distinct?: boolean;
        col?: string;
    }): Promise<number>;
    get(entity: string, id: string): Promise<Entity | null>;
    getByField(entity: string, field: string, value: any, options?: {
        offset?: number;
        limit?: number;
    }): Promise<Entity[]>;
    getOneByField(entity: string, field: string, value: any): Promise<Entity | null>;
    set(entity: string, id: string, data: Entity): Promise<void>;
    bulkCreate(entity: string, data: Entity[]): Promise<void>;
    bulkUpdate(entity: string, data: Entity[], fields?: string[]): Promise<void>;
    remove(entity: string, id: string): Promise<void>;
}
export interface NearBlock {
    author: string;
    header: BlockHeader;
    chunks: Chunk[];
    transactions: NearTransaction[];
    actions: NearAction[];
    receipts: NearTransactionReceipt[];
}
export interface NearTransaction {
    nonce: BN;
    signer_id: string;
    public_key: string;
    receiver_id: string;
    actions: NearAction[];
    block_hash: string;
    block_height: number;
    gas_price: string;
    gas_used: string;
    timestamp: number;
    result: TransactionResult;
}
export interface TransactionResult {
    id: string;
    logs: string[];
}
export interface NearTransactionReceipt {
    id: number;
    block_height: number;
    receipt_id: string;
    predecessor_id: string;
    Action?: {
        actions: NearAction[];
        gas_price: BN;
        input_data_ids: string[];
        output_data_receivers: {
            data_id: string;
            receiver_id: string;
        }[];
        signer_id: string;
        signer_public_key: string;
    };
    Data?: {
        data: string;
        data_id: string;
    };
    receiver_id: string;
}
export interface CreateAccount {
}
export interface DeployContract {
    code: Uint8Array;
}
export interface FunctionCall {
    method_name: string;
    args: IArgs;
    gas: BN;
    deposit: BN;
}
export interface Transfer {
    deposit: BN;
}
export interface Stake {
    stake: BN;
    public_key: string;
}
export interface AddKey {
    public_key: string;
    access_key: {
        nonce: BN;
        permission: string;
    };
}
export interface DeleteKey {
    public_key: string;
}
export interface DeleteAccount {
    beneficiary_id: string;
}
export type Action = CreateAccount | DeployContract | FunctionCall | Transfer | Stake | AddKey | DeleteKey | DeleteAccount;
export declare const ActionType: {
    readonly CreateAccount: "CreateAccount";
    readonly DeployContract: "DeployContract";
    readonly FunctionCall: "FunctionCall";
    readonly Transfer: "Transfer";
    readonly Stake: "Stake";
    readonly AddKey: "AddKey";
    readonly DeleteKey: "DeleteKey";
    readonly DeleteAccount: "DeleteAccount";
};
export type ActionType = typeof ActionType[keyof typeof ActionType];
export interface NearAction<T = Action | any> {
    id: number;
    type: ActionType;
    action: T;
    transaction: NearTransaction;
    receipt?: NearTransactionReceipt;
}
export type DynamicDatasourceCreator = (name: string, args: Record<string, unknown>) => Promise<void>;
